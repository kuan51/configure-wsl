---
description: For git commit messages that follow internal processes and best practices.
alwaysApply: false
---

commit_message_standard: Conventional Commit

structure:
format: |
<type>[optional scope]: <description>

    [optional body]

    [optional footer(s)]

commit_elements:
types:
mandatory: - fix: patches a bug, correlates to PATCH in Semantic Versioning. - feat: introduces a new feature, correlates to MINOR in Semantic Versioning.
optional: - build - chore - ci - docs - style - refactor - perf - test - others

breaking_change:
indicator: "BREAKING CHANGE"
description_format:
footer: |
BREAKING CHANGE: <description>
type_scope_prefix: |
<type>[optional scope]!:

specification_rules:

- Commits MUST be prefixed with a type followed by an OPTIONAL scope, OPTIONAL '!', and REQUIRED colon and space.
- The type feat MUST indicate a new feature addition.
- The type fix MUST indicate a bug fix.
- OPTIONAL scope MUST be a noun in parentheses, e.g., feat(parser):
- A description MUST follow immediately after type/scope, clearly summarizing the change.
- A commit body MAY be included, separated by one blank line after the description, and can consist of multiple paragraphs.
- Footer sections MAY be included after the body, each separated by one blank line.
- Footers MUST use a word token followed by a ':' and space, or a space and '#', followed by a string value (similar to git trailer conventions).
- Footer tokens MUST use '-' in place of whitespace, e.g., Acked-by.
- BREAKING CHANGE MAY appear either in the footer or by appending '!' after type/scope prefix.
- BREAKING CHANGE footer MUST be uppercase and clearly describe the breaking change.
- The units of information (type, scope) MUST NOT be case sensitive, except BREAKING CHANGE which MUST always be uppercase.
- BREAKING-CHANGE is synonymous with BREAKING CHANGE when used as a token in a footer.
